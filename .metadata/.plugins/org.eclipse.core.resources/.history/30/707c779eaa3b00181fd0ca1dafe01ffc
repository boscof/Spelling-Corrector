import java.io.File;
import java.util.Scanner;

public class NgramSimilarity {
	private static final int TOTAL_WORDS = 716;
	private static final int DICTIONARY_SIZE = 500000;
	private static final int DEFAULT_N = 2;
	
	public static void main(String[] args) {
	
		int size_of_dict = 0;
		int misspelt_count = 0; //check
		int correct_count = 0; //check
		double dist;
		
		String misspelt[] = new String[TOTAL_WORDS];
		String corrected[] = new String[TOTAL_WORDS];
		String dict[] = new String[DICTIONARY_SIZE];
		String matched[][] = new String[TOTAL_WORDS][TOTAL_WORDS];
		
		/*try {
			System.setOut(new PrintStream(new FileOutputStream("src/output.txt")));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		*/
		
		try {
			File misspell = new File("src/misspell.txt");
			Scanner input = new Scanner(misspell);
			
			while (input.hasNextLine()) {
				misspelt[misspelt_count] = input.nextLine();
				misspelt_count++;
			}
			input.close();
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		try {
			File correct = new File("src/correct.txt");
			Scanner input = new Scanner(correct);
			
			while (input.hasNextLine()) {
				corrected[correct_count] = input.nextLine();
				correct_count++;
			}
			input.close();
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		String longest = "";
		try {
			File dictionary = new File("src/dictionary.txt");
			Scanner input = new Scanner(dictionary);
			
			while (input.hasNextLine()) {
				dict[size_of_dict] = input.nextLine();
				if (dict[size_of_dict].length() > longest.length()) {
					longest = dict[size_of_dict];
				}
				size_of_dict++;
			}
			input.close();
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		long startTime = System.currentTimeMillis(); //start timer
		
		int n = DEFAULT_N, max = 0, k, l, match;
		
		String dictNgram[][] = new String[DICTIONARY_SIZE][longest.length() - n + 1];//Stores the n-grams
		String misspeltNgram[][] = new String[TOTAL_WORDS][longest.length() - n + 1];
		NgramSimilarity dictConverter = new NgramSimilarity();
		NgramSimilarity misspeltConverter = new NgramSimilarity();
		dictConverter.buildNgram(dict, dictNgram, n);
		misspeltConverter.buildNgram(misspelt, misspeltNgram, n);
		
		for (int i = 0; i < misspelt_count; i++) {
			for (int j = 0; j < size_of_dict; j++) {
				l = 0;
				k = 0;
				match = 0;
				while (misspeltNgram[i][k] != null && dictNgram[j][l] != null) {
					if (misspeltNgram[i][k].equals(dictNgram[j][l])) {
						match++;
					}	
					k++;
					l++;
				}
				if (match > max) {
					matched[i][0] = dict[j];
				}
			}
		}
		
		
		
		long stopTime = System.currentTimeMillis(); //stop timer
		long elapsedTime = stopTime - startTime; //record time taken
	}
	
	public void buildNgram(String library[], String libraryNgram[][], int n) {
		 //stores a temporary substring of size n
		char temp[] = new char[n];
		int i = 0, k, l;
		while (library[i] != null) {
			k = 0;
			while(k < library[i].length() - n + 1) {
				l = 0;
				for (int j = 0; j < n; j++) {
					temp[j] = library[i].charAt(l+k);
					l++;
				}
				libraryNgram[i][k] = String.valueOf(temp);
				k++;
			}
			i++;
		}
	}
}

