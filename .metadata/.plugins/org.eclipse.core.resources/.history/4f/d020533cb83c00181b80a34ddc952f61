import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;

public class Spellings {
	
	private static final int TOTAL_WORDS = 716;
	private static final int DICTIONARY_SIZE = 500000;
	
	public static void main(String[] args) {
		
		int size_of_dict = 0;
		int misspelt_count = 0;
		int correct_count = 0;
		
		String misspelt[] = new String[TOTAL_WORDS];
		String corrected[] = new String[TOTAL_WORDS];
		String dict[] = new String[DICTIONARY_SIZE];
		
		try {
			File misspell = new File("src/misspell.txt");
			Scanner input = new Scanner(misspell);
			
			while (input.hasNextLine()) {
				misspelt[misspelt_count] = input.nextLine();
				misspelt_count++;
			}
			input.close();
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		try {
			File correct = new File("src/correct.txt");
			Scanner input = new Scanner(correct);
			
			while (input.hasNextLine()) {
				corrected[correct_count] = input.nextLine();
				correct_count++;
			}
			input.close();
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		try {
			File dictionary = new File("src/dictionary.txt");
			Scanner input = new Scanner(dictionary);
			
			while (input.hasNextLine()) {
				dict[size_of_dict] = input.nextLine();
				size_of_dict++;
			}
			input.close();
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		calculateLeven(misspelt, dict, corrected, misspelt_count, correct_count, size_of_dict);
	}
	
	public static void calculateLeven(String[] misspelt, String[] dict, String[] corrected, int misspelt_count,
			int correct_count, int size_of_dict) {
		
		try {
			System.setOut(new PrintStream(new FileOutputStream("output/single/Leven-output.txt")));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		long startTime = System.currentTimeMillis(); //start timer
			
		Levenshtein editDistance = new Levenshtein();
		
		double dist, min;
		
		String matched[] = new String[TOTAL_WORDS];
		
		//Calculates the Levenshtein distance between each mis-spelt word and dictionary entry
		for (int i = 0; i < misspelt_count; i++) {
			min = editDistance.score(misspelt[i], dict[0]);
			matched[i] = dict[0];
			for (int j = 1; j < size_of_dict; j++) {
				dist = editDistance.score(misspelt[i], dict[j]);
				//Record best match
				if (min > dist) {
					matched[i] = dict[j];
					min = dist;
				}
			}
		}
		
		double right = 0.0, sum = 0.0;
		char result;
		
		//Calculate accuracy
		System.out.format("%-20s %-20s %-20s %-5s%n%n", "Misspelt", "Predicted", "Correct", "Match");
		for (int i = 0; i < misspelt_count; i++) {
			if (corrected[i].equals(matched[i])) {
				right = right + 1.0;
				result = 'Y';
			} else {
				result = 'N';
			}
			sum = sum + 1.0;
			System.out.format("%-20s %-20s %-20s %-7c%n", misspelt[i], matched[i], corrected[i], result);
		}
		
		long stopTime = System.currentTimeMillis(); //stop timer
		long elapsedTime = stopTime - startTime; //record time taken
		double seconds = (double) elapsedTime / 1000;
		
		double accuracy = right/sum;
		System.out.format("Accuracy: %.3f%n", accuracy);
		System.out.format("Time Elapsed: %.1f%n", seconds);
	}
	public static void calculateDamerau(String[] misspelt, String[] dict, String[] corrected, int misspelt_count,
			int correct_count, int size_of_dict) {
		
		try {
			System.setOut(new PrintStream(new FileOutputStream("output/single/Damerau-output.txt")));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		long startTime = System.currentTimeMillis(); //start timer
			
		Damerau editDistance = new Damerau();
		
		double dist, min;
		
		String matched[] = new String[TOTAL_WORDS];
		
		//Calculates the Damerau - Levenshtein distance between each mis-spelt word and dictionary entry
		for (int i = 0; i < misspelt_count; i++) {
			min = editDistance.score(misspelt[i], dict[0]);
			matched[i] = dict[0];
			for (int j = 1; j < size_of_dict; j++) {
				dist = editDistance.score(misspelt[i], dict[j]);
				//Record best match
				if (min > dist) {
					matched[i] = dict[j];
					min = dist;
				}
			}
		}
		
		double right = 0.0, sum = 0.0;
		char result;
		
		//Calculate accuracy
		System.out.format("%-20s %-20s %-20s %-5s%n%n", "Misspelt", "Predicted", "Correct", "Match");
		for (int i = 0; i < misspelt_count; i++) {
			if (corrected[i].equals(matched[i])) {
				right = right + 1.0;
				result = 'Y';
			} else {
				result = 'N';
			}
			sum = sum + 1.0;
			System.out.format("%-20s %-20s %-20s %-7c%n", misspelt[i], matched[i], corrected[i], result);
		}
		
		long stopTime = System.currentTimeMillis(); //stop timer
		long elapsedTime = stopTime - startTime; //record time taken
		double seconds = (double) elapsedTime / 1000;
		
		double accuracy = right/sum;
		System.out.format("Accuracy: %.3f%n", accuracy);
		System.out.format("Time Elapsed: %.1f%n", seconds);
	}
	public static void calculatebiGram(String[] misspelt, String[] dict, String[] corrected, int misspelt_count,
			int correct_count, int size_of_dict) {
		
		try {
			System.setOut(new PrintStream(new FileOutputStream("output/single/biGram-output.txt")));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		long startTime = System.currentTimeMillis(); //start timer
			
		NGramDistance editDistance = new NGramDistance();
		
		double dist, min;
		
		String matched[] = new String[TOTAL_WORDS];
		
		//Calculates the N Gram Distance with n = 2 between each mis-spelt word and dictionary entry
		for (int i = 0; i < misspelt_count; i++) {
			min = editDistance.score(misspelt[i], dict[0]);
			matched[i] = dict[0];
			for (int j = 1; j < size_of_dict; j++) {
				dist = editDistance.score(misspelt[i], dict[j]);
				//Record best match
				if (min > dist) {
					matched[i] = dict[j];
					min = dist;
				}
			}
		}
		
		double right = 0.0, sum = 0.0;
		char result;
		
		//Calculate accuracy
		System.out.format("%-20s %-20s %-20s %-5s%n%n", "Misspelt", "Predicted", "Correct", "Match");
		for (int i = 0; i < misspelt_count; i++) {
			if (corrected[i].equals(matched[i])) {
				right = right + 1.0;
				result = 'Y';
			} else {
				result = 'N';
			}
			sum = sum + 1.0;
			System.out.format("%-20s %-20s %-20s %-7c%n", misspelt[i], matched[i], corrected[i], result);
		}
		
		long stopTime = System.currentTimeMillis(); //stop timer
		long elapsedTime = stopTime - startTime; //record time taken
		double seconds = (double) elapsedTime / 1000;
		
		double accuracy = right/sum;
		System.out.format("Accuracy: %.3f%n", accuracy);
		System.out.format("Time Elapsed: %.1f%n", seconds);
	}
}
